// If true, overlapping intervals are generated and used in case of numerical values.
useOverlappingIntervals = false

provider = "csvReader"

csvReader {
  dataFile = "data/Ist-Analyse V5.csv"
  dataFilesHaveHeader = true
  // Separator used in the data files as string
  separator = "\t"
  // quoteCharacter =
  // escxapeCharacter
}

outputFile = "result_IstAnalyse"

dateTimeFormat = "yyyy-mm-dd"  // date time format templater according to http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html

// minimal quality
minimalQuality = 0.0
// minimal generality
minGenerality = 0.0
// minimal probability
minProbability = 0.0

// if true, the closure of the k best subgroups are computed.
computeClosureOfSubgroups = false
// if true, the refinements of subgroups are computed.
refineSubgroups = false

// Supported quality functions are presently Piatetsky (Default),Binomial, Split, Pearson, and Gini
qualityfunction = "Piatetsky"

features = [
  {attribute = charge, typ = "Nominal"},
  {attribute = kundennr, typ = "Nominal"},
  {attribute = timestamp, typ = "Date"},
  {attribute = feature1, typ = "Numeric", binning = "Interval", intervals = [0.0, 0.5, 1.0]}
  {attribute = 02ist, typ = "Numeric", binning = "Entropy", bins = 5},
  {attribute = 03ist, typ = "Numeric", binning = "Interval", intervals = [0.0, 0.5, 1.0]},
  {attribute = 04ist, typ = "Numeric", binning = "Entropy", bins = 5},
  {attribute = 05ist, typ = "Numeric", binning = "EqualFrequency", bins = 5},
  {attribute = 06ist, typ = "Numeric", binning = "EqualWidth", bins = 5},
  {attribute = 07ist, typ = "Numeric", binning = {mode = Entropy, bins = 5}}
]

time {
  attribute = timestamp
  format = "yyyy-MM-dd HH:mm:ss.0"
}

compounds = [
    { name = compound1, group = [01ist, charge]},
    { name = compound2, group = [02ist, kundennr]}
]

aggregators = [
  {
    groupBy = seqId,
    attributes = [num, x],
    operator = count,
    condition = "num >= 0.0 && x == \"a\"",
    periods = [3s]
  },
  {
    groupBy = seqId,
    attribute = num,
    operator = sum,
    condition = "num >= 0.0",
    periods = [3s]
    binning = {mode = "Entropy", bins = 5}
  }
]


// attribute of the target feature
// all values of the target attribute not listed in "groups" are subsumed to a group "default".

target {
attribute = "kundennr",
labels = ["138921"]
}

// If true, overlapping intervals are generated and used in case of numerical values.
useOverlappingIntervals = false

instanceFilter =  "feature1 >= 0.0"